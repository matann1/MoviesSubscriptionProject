{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport moment from \"moment\";\nimport { useState, useEffect } from 'react';\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = _ref => {\n  _s();\n\n  var _movies$, _movies$2;\n\n  let {\n    movies,\n    id\n  } = _ref;\n  const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n  const subscriptionsMember = subscriptions.filter(sub => sub.memberId === id);\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n  const [objToAdd, setObjToAdd] = useState({\n    memberId: id,\n    movieId: (_movies$ = movies[0]) === null || _movies$ === void 0 ? void 0 : _movies$._id,\n    date: moment().format(\"YYYY-MM-DDT00:00:00.000\")\n  });\n  const [movieExist, setMovieExist] = useState(true);\n\n  const add = async () => {\n    if (movieExist) {\n      try {\n        const {\n          data\n        } = await axios.post(subUrl, objToAdd);\n        console.log(data);\n        dispatch(doAddSubscription(objToAdd));\n        setMovieExist(false);\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      alert('This movie already subscribe!');\n    }\n  };\n\n  useEffect(() => {\n    if (subscriptionsMember.find(sunMem => sunMem.movieId === objToAdd.movieId)) {\n      setMovieExist(false);\n    } else {\n      setMovieExist(true);\n    }\n  }, [objToAdd, subscriptionsMember]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '3px solid black',\n      margin: '5px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      style: {\n        margin: '2px'\n      },\n      inputValue: inputValue,\n      onInputChange: (event, newInputValue) => {\n        var _movies$find;\n\n        setInputValue(newInputValue);\n        setObjToAdd({ ...objToAdd,\n          movieId: (_movies$find = movies.find(movie => movie.name === newInputValue)) === null || _movies$find === void 0 ? void 0 : _movies$find._id\n        });\n      },\n      defaultValue: (_movies$2 = movies[0]) === null || _movies$2 === void 0 ? void 0 : _movies$2.name,\n      options: movies.map(movie => movie.name),\n      sx: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"Subscribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNewMovieToMember, \"uLFjC7f1vigw5VTjRsxCtS/6QE0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AddNewMovieToMember;\nexport default AddNewMovieToMember;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewMovieToMember\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js"],"names":["axios","TextField","Autocomplete","moment","useState","useEffect","doAddSubscription","useDispatch","useSelector","subUrl","AddNewMovieToMember","movies","id","subscriptions","state","SubscriptionsReducer","subscriptionsMember","filter","sub","memberId","dispatch","inputValue","setInputValue","objToAdd","setObjToAdd","movieId","_id","date","format","movieExist","setMovieExist","add","data","post","console","log","err","alert","find","sunMem","border","margin","event","newInputValue","movie","name","map","width","params"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport moment from \"moment\";\n\nimport { useState, useEffect } from 'react'\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = ({movies, id}) => {\n    const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n    const subscriptionsMember = subscriptions.filter((sub)=> sub.memberId === id);\n   \n    const dispatch = useDispatch();\n    const [inputValue, setInputValue] = useState('');\n    const [objToAdd, setObjToAdd] = useState({memberId: id, movieId: movies[0]?._id, date: moment().format(\"YYYY-MM-DDT00:00:00.000\")})\n    const [movieExist, setMovieExist] = useState(true)\n\n    const add = async () => {\n        if(movieExist){\n          try{\n            const {data} = await axios.post(subUrl, objToAdd);\n            console.log(data);\n            dispatch(doAddSubscription(objToAdd));\n            setMovieExist(false)\n            }\n            catch(err){\n                console.log(err)\n            }\n        }else{\n            alert('This movie already subscribe!');\n        }\n    }\n\n    useEffect(() => {\n      if(subscriptionsMember.find((sunMem)=> sunMem.movieId === objToAdd.movieId)){\n          setMovieExist(false)\n      }else{\n          setMovieExist(true)\n      }\n    }, [objToAdd, subscriptionsMember])\n    \n  return (\n    <div style={{border: '3px solid black', margin: '5px'}}>\n    <Autocomplete style={{margin: '2px'}}\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n\n        setObjToAdd({...objToAdd, movieId :((movies.find((movie)=> movie.name === newInputValue))?._id)})\n      }}\n      defaultValue={movies[0]?.name}\n      options={movies.map((movie)=> movie.name)}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} />}\n    />\n    <button onClick={add}>Subscribe</button>\n  </div>\n  )\n}\n\nexport default AddNewMovieToMember"]},"metadata":{},"sourceType":"module"}