{"ast":null,"code":"const initialMoviesState = {\n  movies: []\n};\n\nconst applyMoviesChange = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialMoviesState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOADMOVIE':\n      return { ...state,\n        movies: action.payload\n      };\n\n    case 'EDITMOVIE':\n      {\n        const movieIndex = state.movies.findIndex(movie => movie._id === action.payload._id);\n        debugger;\n        const d = state.movies[movieIndex] = action.payload;\n        console.log(state.movies);\n        console.log(movieIndex);\n        console.log(d);\n        return { ...state,\n          movies: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default applyMoviesChange;","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/redux/MoviesReducer.js"],"names":["initialMoviesState","movies","applyMoviesChange","state","action","type","payload","movieIndex","findIndex","movie","_id","d","console","log"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AADe,CAA3B;;AAKE,MAAMC,iBAAiB,GAAG,YAAwC;AAAA,MAAvCC,KAAuC,uEAA/BH,kBAA+B;AAAA,MAAXI,MAAW;;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAA3B,OAAP;;AAEF,SAAK,WAAL;AAAkB;AAEd,cAAMC,UAAU,GAAGJ,KAAK,CAACF,MAAN,CAAaO,SAAb,CAChBC,KAAD,IACEA,KAAK,CAACC,GAAN,KAAcN,MAAM,CAACE,OAAP,CAAeI,GAFd,CAAnB;AAIA;AACA,cAAMC,CAAC,GAAGR,KAAK,CAACF,MAAN,CAAaM,UAAb,IAA2BH,MAAM,CAACE,OAA5C;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACF,MAAlB;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEA,eAAO,EAAE,GAAGR,KAAL;AAAYF,UAAAA,MAAM,EAAEG,MAAM,CAACE;AAA3B,SAAP;AACD;;AAEH;AACE,aAAOH,KAAP;AApBJ;AAsBD,CAvBD;;AAyBA,eAAeD,iBAAf","sourcesContent":["const initialMoviesState = {\n    movies: []\n    \n  };\n\n  const applyMoviesChange = (state = initialMoviesState, action) => {\n    switch (action.type) {\n      case 'LOADMOVIE':\n        return { ...state, movies: action.payload };\n\n      case 'EDITMOVIE': {\n          \n          const movieIndex = state.movies.findIndex(\n            (movie) => \n              movie._id === action.payload._id\n          );\n          debugger\n          const d = state.movies[movieIndex] = action.payload\n          console.log(state.movies)\n          console.log(movieIndex);\n          console.log(d);\n          \n          return { ...state, movies: action.payload};\n        }\n  \n      default:\n        return state;\n    }\n  };\n\n  export default applyMoviesChange"]},"metadata":{},"sourceType":"module"}