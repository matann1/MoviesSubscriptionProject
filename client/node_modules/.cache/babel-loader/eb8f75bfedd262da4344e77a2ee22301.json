{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = _ref => {\n  _s();\n\n  var _movies$, _movies$2;\n\n  let {\n    movies,\n    id\n  } = _ref;\n  const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n  const subscriptionsMember = subscriptions.filter(sub => sub.memberId === id);\n  console.log(subscriptionsMember);\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n  const [objToAdd, setObjToAdd] = useState({\n    memberId: id,\n    movieId: (_movies$ = movies[0]) === null || _movies$ === void 0 ? void 0 : _movies$._id,\n    date: moment().format(\"DD/MM/YYYY\")\n  });\n\n  const add = async () => {\n    if (movies.map(movie => movie._id === objToAdd.movieId)) {\n      alert('This movie already subscribe!');\n    } else {\n      const resp = await axios.post(subUrl, objToAdd);\n      console.log(resp.data);\n      dispatch(doAddSubscription(objToAdd));\n    }\n  };\n\n  useEffect(() => {\n    console.log(objToAdd);\n  }, [objToAdd]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      inputValue: inputValue,\n      onInputChange: (event, newInputValue) => {\n        var _movies$find;\n\n        setInputValue(newInputValue);\n        console.log(newInputValue); // debugger\n\n        setObjToAdd({ ...objToAdd,\n          movieId: (_movies$find = movies.find(movie => movie.name === newInputValue)) === null || _movies$find === void 0 ? void 0 : _movies$find._id\n        }); // console.log(movies.find((movie)=> movie.name === newInputValue)?._id)\n        // console.log((movies.find((movie)=> movie.name === inputValue))?._id)\n\n        console.log(objToAdd.date);\n        console.log(objToAdd);\n      },\n      defaultValue: (_movies$2 = movies[0]) === null || _movies$2 === void 0 ? void 0 : _movies$2.name,\n      options: movies.map(movie => movie.name),\n      sx: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"Subscribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNewMovieToMember, \"tOiCoLF3K+v4FMat0f3aawPcmlc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AddNewMovieToMember;\nexport default AddNewMovieToMember;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewMovieToMember\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js"],"names":["axios","useState","useEffect","TextField","Autocomplete","doAddSubscription","useDispatch","useSelector","moment","subUrl","AddNewMovieToMember","movies","id","subscriptions","state","SubscriptionsReducer","subscriptionsMember","filter","sub","memberId","console","log","dispatch","inputValue","setInputValue","objToAdd","setObjToAdd","movieId","_id","date","format","add","map","movie","alert","resp","post","data","event","newInputValue","find","name","width","params"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = ({movies, id}) => {\n    const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n    const subscriptionsMember = subscriptions.filter((sub)=> sub.memberId === id);\n    console.log(subscriptionsMember)\n    const dispatch = useDispatch();\n    const [inputValue, setInputValue] = useState('');\n    const [objToAdd, setObjToAdd] = useState({memberId: id, movieId: movies[0]?._id, date: moment().format(\"DD/MM/YYYY\")})\n\n    const add = async () => {\n        if(movies.map((movie)=> movie._id === objToAdd.movieId)){\n            alert('This movie already subscribe!');\n        }else{\n            const resp = await axios.post(subUrl, objToAdd);\n            console.log(resp.data);\n            dispatch(doAddSubscription(objToAdd));\n        }\n      };\n\n\n    useEffect(() => {\n      console.log(objToAdd)\n    }, [objToAdd])\n    \n  return (\n    <div>\n\n    <Autocomplete\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n        console.log(newInputValue)\n        // debugger\n        setObjToAdd({...objToAdd, movieId :((movies.find((movie)=> movie.name === newInputValue))?._id)})\n        // console.log(movies.find((movie)=> movie.name === newInputValue)?._id)\n        // console.log((movies.find((movie)=> movie.name === inputValue))?._id)\n        console.log(objToAdd.date)\n        console.log(objToAdd)\n\n      }}\n      \n      defaultValue={movies[0]?.name}\n      options={movies.map((movie)=> movie.name)}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} />}\n    />\n    <button onClick={add}>Subscribe</button>\n\n  </div>\n  )\n}\n\nexport default AddNewMovieToMember"]},"metadata":{},"sourceType":"module"}