{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialState = {\n  users: [],\n  movies: []\n};\n\nconst applyUsersChange = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOAD':\n      return { ...state,\n        users: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst applyMoviesChange = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOAD':\n      return { ...state,\n        movies: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  applyUsersChange,\n  applyMoviesChange\n});","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/redux/reducers.js"],"names":["combineReducers","initialState","users","movies","applyUsersChange","state","action","type","payload","applyMoviesChange"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAKE,MAAMC,gBAAgB,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACzD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYH,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAA1B,OAAP;;AAEF;AACE,aAAOH,KAAP;AALJ;AAOD,CARD;;AAUA,MAAMI,iBAAiB,GAAG,YAAkC;AAAA,MAAjCJ,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAA3B,OAAP;;AAEF;AACE,aAAOH,KAAP;AALJ;AAOD,CARD;;AAUD,eAAgBL,eAAe,CAAC;AAC7BI,EAAAA,gBAD6B;AACXK,EAAAA;AADW,CAAD,CAA/B","sourcesContent":["import { combineReducers } from 'redux'\n\nconst initialState = {\n    users: [],\n    movies: []\n  };\n  \n  const applyUsersChange = (state = initialState, action) => {\n    switch (action.type) {\n      case 'LOAD':\n        return { ...state, users: action.payload };\n  \n      default:\n        return state;\n    }\n  };\n\n  const applyMoviesChange = (state = initialState, action) => {\n    switch (action.type) {\n      case 'LOAD':\n        return { ...state, movies: action.payload };\n  \n      default:\n        return state;\n    }\n  };\n  \n export  default combineReducers({\n    applyUsersChange, applyMoviesChange\n }) "]},"metadata":{},"sourceType":"module"}