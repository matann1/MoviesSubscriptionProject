{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/EditMovieComp.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { doEditMovie } from '../redux/MoviesActions';\nimport Grid from \"@mui/material/Grid\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moviesUrl = 'http://localhost:8000/movies';\n\nconst EditMovieComp = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    movieid\n  } = useParams();\n  const movies = useSelector(state => state.MoviesReducer.movies);\n  const movie = movies.find(movie => movie._id === movieid);\n  const [movieEdit, setMovieEdit] = useState(movie);\n  const [movieEditErrors, setMovieEditErrors] = useState({});\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const update = async () => {\n    const {\n      data\n    } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n    console.log(data);\n    dispatch(doEditMovie(movieEdit));\n    navigate('/mainpage');\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmit(true);\n    setMovieEditErrors(validate(movieEdit));\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (Object.keys(setMovieEditErrors).length === 0 && isSubmit) {\n        //     const { data } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n        //     console.log(data);\n        //     dispatch(doEditMovie(movieEdit));\n        //   setMovieEdit(movieEdit);\n        navigate('/mainpage');\n      }\n    })();\n  }, [setMovieEditErrors]);\n\n  const cancel = () => {\n    navigate('/mainpage');\n  };\n\n  const validate = values => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = \"Name is required!\";\n    }\n\n    if (!values.genres) {\n      errors.genres = \"Genres is required!\";\n    }\n\n    if (!values.image) {\n      errors.image = \"Image is required!\";\n    }\n\n    if (!values.yearPremiered) {\n      errors.yearPremiered = \"YearPremiered is required!\";\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: '50%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 17\n            },\n            color: \"text.secondary\",\n            gutterBottom: true,\n            children: [\"Edit Movie: \", movie.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Name:\",\n                value: movieEdit.name,\n                multiline: true,\n                name: \"name\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  name: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.genres\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Genres:\",\n                value: movieEdit.genres,\n                multiline: true,\n                name: \"genres\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  genres: e.target.value.split(',')\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Image URL:\",\n                value: movieEdit.image,\n                multiline: true,\n                name: \"image\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  image: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.yearPremiered\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"image\",\n                label: \"Premired:\",\n                type: \"date\",\n                value: movieEdit.yearPremiered.split('T')[0],\n                InputLabelProps: {\n                  shrink: true,\n                  required: true\n                },\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  yearPremiered: e.target.value + \"T00:00:00.000Z\"\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: cancel,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this), \" \", ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditMovieComp, \"iIVCvz11I8Vgg91gLzZcweILePw=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector];\n});\n\n_c = EditMovieComp;\nexport default EditMovieComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMovieComp\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/EditMovieComp.js"],"names":["axios","useState","useEffect","useParams","useNavigate","useSelector","useDispatch","doEditMovie","Grid","Card","CardContent","Button","Typography","TextField","moviesUrl","EditMovieComp","dispatch","navigate","movieid","movies","state","MoviesReducer","movie","find","_id","movieEdit","setMovieEdit","movieEditErrors","setMovieEditErrors","isSubmit","setIsSubmit","update","data","put","console","log","handleSubmit","e","preventDefault","validate","Object","keys","length","cancel","values","errors","name","genres","image","yearPremiered","marginTop","width","fontSize","target","value","color","split","shrink","required"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { doEditMovie } from '../redux/MoviesActions';\n\nimport Grid from \"@mui/material/Grid\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from \"@mui/material/TextField\";\n\n\nconst moviesUrl = 'http://localhost:8000/movies';\n\nconst EditMovieComp = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate();\n    const { movieid } = useParams();\n    const movies = useSelector(state => state.MoviesReducer.movies);\n    const movie = movies.find((movie)=> movie._id === movieid)\n    const [movieEdit, setMovieEdit] = useState(movie)\n    const [movieEditErrors, setMovieEditErrors] = useState({})\n    const [isSubmit, setIsSubmit] = useState(false)\n\n    const update = async () => {\n        const { data } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n        console.log(data);\n        dispatch(doEditMovie(movieEdit));\n        navigate('/mainpage')\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setIsSubmit(true);\n        setMovieEditErrors(validate(movieEdit));\n      };\n    \n      useEffect(() => {\n        (async () => {if(Object.keys(setMovieEditErrors).length === 0 && isSubmit){\n        //     const { data } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n        //     console.log(data);\n        //     dispatch(doEditMovie(movieEdit));\n        //   setMovieEdit(movieEdit);\n\n          navigate('/mainpage')\n        }})()\n      }, [setMovieEditErrors])\n      \n    \n      const cancel = () => {\n        navigate('/mainpage')\n    }\n    \n      const validate = (values) => {\n        const errors = {}\n        if(!values.name) {\n            errors.name = \"Name is required!\";\n        }\n        if(!values.genres) {\n            errors.genres = \"Genres is required!\";\n        }\n        if(!values.image) {\n            errors.image = \"Image is required!\";\n        }\n        if(!values.yearPremiered) {\n            errors.yearPremiered = \"YearPremiered is required!\";\n        }\n        return errors;\n      }\n\n  return (\n    <div style={{marginTop: '20px'}}>\n \n<Card sx={{ width: '50%' }}>\n<form onSubmit={handleSubmit}>\n      <CardContent>\n        <Typography sx={{ fontSize: 17 }} color=\"text.secondary\" gutterBottom>\n            Edit Movie: {movie.name} \n        </Typography>   \n        <Grid container direction={\"column\"} spacing={3}>\n        <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Name:\"\n                    value={movieEdit.name}\n                    multiline\n                    name=\"name\"\n                    onChange={(e) =>\n                     setMovieEdit({ ...movieEdit, name: e.target.value })\n                    }\n                  />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.genres}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Genres:\"\n                    value={movieEdit.genres}\n                    multiline\n                    name=\"genres\"\n                    onChange={(e) =>\n                        setMovieEdit({ ...movieEdit, genres: e.target.value.split(',') })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.image}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Image URL:\"\n                    value={movieEdit.image}\n                    multiline\n                    name=\"image\"\n                    onChange={(e) =>\n                    setMovieEdit({ ...movieEdit, image: e.target.value })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.yearPremiered}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    name=\"image\"\n                    label=\"Premired:\"\n                    type=\"date\"\n                    value={movieEdit.yearPremiered.split('T')[0]}\n                    InputLabelProps={{ shrink: true, required: true }}\n                    onChange={(e) =>\n                    setMovieEdit({ ...movieEdit, yearPremiered : e.target.value+\"T00:00:00.000Z\" })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.name}\n                </Grid>\n                <Grid item>\n                  <Button type=\"submit\" variant=\"contained\">\n                    Save\n                  </Button>{\" \"}\n                  <Button variant=\"contained\" onClick={cancel}>Cancel</Button> {' '}\n                </Grid>\n                </Grid>\n      </CardContent>\n      </form>\n    </Card>\n    </div>\n  )\n}\n\nexport default EditMovieComp"]},"metadata":{},"sourceType":"module"}