{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = _ref => {\n  _s();\n\n  var _movies$, _movies$2;\n\n  let {\n    movies,\n    id\n  } = _ref;\n  const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n  const subscriptionsMember = subscriptions.filter(sub => sub.memberId === id);\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n  const [objToAdd, setObjToAdd] = useState({\n    memberId: id,\n    movieId: (_movies$ = movies[0]) === null || _movies$ === void 0 ? void 0 : _movies$._id,\n    date: moment().format(\"DD/MM/YYYY\")\n  });\n  const [movieExist, setMovieExist] = useState(true);\n\n  const add = async () => {\n    if (movieExist) {\n      const resp = await axios.post(subUrl, objToAdd);\n      console.log(resp.data);\n      dispatch(doAddSubscription(objToAdd));\n    } else {\n      alert('This movie already subscribe!');\n    }\n  };\n\n  useEffect(() => {\n    debugger;\n\n    if (!subscriptionsMember.find(sunMem => sunMem.movieId === objToAdd.movieId)) {\n      setMovieExist(false);\n    }\n\n    ;\n    console.log(objToAdd);\n    console.log(movieExist);\n  }, [objToAdd]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      inputValue: inputValue,\n      onInputChange: (event, newInputValue) => {\n        var _movies$find;\n\n        setInputValue(newInputValue);\n        console.log(newInputValue); // debugger\n\n        setObjToAdd({ ...objToAdd,\n          movieId: (_movies$find = movies.find(movie => movie.name === newInputValue)) === null || _movies$find === void 0 ? void 0 : _movies$find._id\n        }); // console.log(movies.find((movie)=> movie.name === newInputValue)?._id)\n        // console.log((movies.find((movie)=> movie.name === inputValue))?._id)\n\n        console.log(objToAdd.date);\n        console.log(objToAdd);\n      },\n      defaultValue: (_movies$2 = movies[0]) === null || _movies$2 === void 0 ? void 0 : _movies$2.name,\n      options: movies.map(movie => movie.name),\n      sx: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"Subscribe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddNewMovieToMember, \"xErIqr2LDbt9wRm7wHhW4QhFbek=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AddNewMovieToMember;\nexport default AddNewMovieToMember;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNewMovieToMember\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddNewMovieToMember.js"],"names":["axios","useState","useEffect","TextField","Autocomplete","doAddSubscription","useDispatch","useSelector","moment","subUrl","AddNewMovieToMember","movies","id","subscriptions","state","SubscriptionsReducer","subscriptionsMember","filter","sub","memberId","dispatch","inputValue","setInputValue","objToAdd","setObjToAdd","movieId","_id","date","format","movieExist","setMovieExist","add","resp","post","console","log","data","alert","find","sunMem","event","newInputValue","movie","name","map","width","params"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { doAddSubscription } from \"../redux/SubscriptionsActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\n\nconst subUrl = 'http://localhost:8000/subscriptions';\n\nconst AddNewMovieToMember = ({movies, id}) => {\n    const subscriptions = useSelector(state => state.SubscriptionsReducer.subscriptions);\n    const subscriptionsMember = subscriptions.filter((sub)=> sub.memberId === id);\n   \n    const dispatch = useDispatch();\n    const [inputValue, setInputValue] = useState('');\n    const [objToAdd, setObjToAdd] = useState({memberId: id, movieId: movies[0]?._id, date: moment().format(\"DD/MM/YYYY\")})\n    const [movieExist, setMovieExist] = useState(true)\n\n    const add = async () => {\n        if(movieExist){\n            const resp = await axios.post(subUrl, objToAdd);\n            console.log(resp.data);\n            dispatch(doAddSubscription(objToAdd));\n        }else{\n            alert('This movie already subscribe!');\n        }\n\n    }\n\n    useEffect(() => {\n        debugger\n        if(!subscriptionsMember.find((sunMem)=> sunMem.movieId === objToAdd.movieId)){\n            setMovieExist(false)\n      };\n      console.log(objToAdd)\n      console.log(movieExist)\n    }, [objToAdd])\n    \n  return (\n    <div>\n\n    <Autocomplete\n      inputValue={inputValue}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n        console.log(newInputValue)\n        // debugger\n        setObjToAdd({...objToAdd, movieId :((movies.find((movie)=> movie.name === newInputValue))?._id)})\n        // console.log(movies.find((movie)=> movie.name === newInputValue)?._id)\n        // console.log((movies.find((movie)=> movie.name === inputValue))?._id)\n        console.log(objToAdd.date)\n        console.log(objToAdd)\n\n      }}\n      \n      defaultValue={movies[0]?.name}\n      options={movies.map((movie)=> movie.name)}\n      sx={{ width: 300 }}\n      renderInput={(params) => <TextField {...params} />}\n    />\n    <button onClick={add}>Subscribe</button>\n\n  </div>\n  )\n}\n\nexport default AddNewMovieToMember"]},"metadata":{},"sourceType":"module"}