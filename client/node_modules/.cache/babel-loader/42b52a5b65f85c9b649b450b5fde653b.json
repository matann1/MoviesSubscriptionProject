{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/EditMovieComp.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { doEditMovie } from '../redux/MoviesActions';\nimport Grid from \"@mui/material/Grid\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from \"@mui/material/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moviesUrl = 'http://localhost:8000/movies';\n\nconst EditMovieComp = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    movieid\n  } = useParams();\n  const movies = useSelector(state => state.MoviesReducer.movies);\n  const movie = movies.find(movie => movie._id === movieid);\n  const [movieEdit, setMovieEdit] = useState(movie);\n  const [movieEditErrors, setMovieEditErrors] = useState({});\n  const [isSubmit, setisSubmit] = useState(false);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setisSubmit(true);\n    setMovieEditErrors(validate(movieEdit));\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (Object.keys(movieEdit).length === 0 && isSubmit) {\n        const {\n          data\n        } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n        console.log(data);\n        dispatch(doEditMovie(movieEdit));\n        setMovieEdit(movieEdit);\n        navigate('/mainpage');\n      }\n    })();\n  }, [movieEditErrors]);\n\n  const cancel = () => {\n    navigate('/mainpage');\n  };\n\n  const validate = values => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = \"Name is required!\";\n    }\n\n    if (values.genres[0] === '') {\n      errors.genres = \"Genres is required!\";\n    }\n\n    if (!values.image) {\n      errors.image = \"Image is required!\";\n    }\n\n    if (!values.yearPremiered) {\n      errors.yearPremiered = \"YearPremiered is required!\";\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: '50%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 17\n            },\n            color: \"text.secondary\",\n            gutterBottom: true,\n            children: [\"Edit Movie: \", movie.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Name:\",\n                value: movieEdit.name,\n                name: \"name\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  name: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Genres:\",\n                value: movieEdit.genres,\n                name: \"genres\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  genres: e.target.value.split(',')\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.genres\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                id: \"outlined-textarea\",\n                label: \"Image URL:\",\n                value: movieEdit.image,\n                name: \"image\",\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  image: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                name: \"image\",\n                label: \"Premired:\",\n                type: \"date\",\n                value: movieEdit.yearPremiered.split('T')[0],\n                InputLabelProps: {\n                  shrink: true,\n                  required: true\n                },\n                onChange: e => setMovieEdit({ ...movieEdit,\n                  yearPremiered: e.target.value + \"T00:00:00.000Z\"\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              style: {\n                color: 'red'\n              },\n              children: movieEditErrors.yearPremiered\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"contained\",\n                children: \"UPDATE\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: cancel,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 19\n              }, this), \" \", ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditMovieComp, \"4Hqq4S2ue1ClJwSOg3yBRPKzOA0=\", false, function () {\n  return [useDispatch, useNavigate, useParams, useSelector];\n});\n\n_c = EditMovieComp;\nexport default EditMovieComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMovieComp\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/EditMovieComp.js"],"names":["axios","useState","useEffect","useParams","useNavigate","useSelector","useDispatch","doEditMovie","Grid","Card","CardContent","Button","Typography","TextField","moviesUrl","EditMovieComp","dispatch","navigate","movieid","movies","state","MoviesReducer","movie","find","_id","movieEdit","setMovieEdit","movieEditErrors","setMovieEditErrors","isSubmit","setisSubmit","handleSubmit","e","preventDefault","validate","Object","keys","length","data","put","console","log","cancel","values","errors","name","genres","image","yearPremiered","marginTop","width","fontSize","target","value","color","split","shrink","required"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { doEditMovie } from '../redux/MoviesActions';\n\nimport Grid from \"@mui/material/Grid\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport TextField from \"@mui/material/TextField\";\n\n\nconst moviesUrl = 'http://localhost:8000/movies';\n\nconst EditMovieComp = () => {\n    const dispatch = useDispatch()\n    const navigate = useNavigate();\n    const { movieid } = useParams();\n    const movies = useSelector(state => state.MoviesReducer.movies);\n    const movie = movies.find((movie)=> movie._id === movieid)\n    const [movieEdit, setMovieEdit] = useState(movie)\n    const [movieEditErrors, setMovieEditErrors] = useState({})\n    const [isSubmit, setisSubmit] = useState(false)\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setisSubmit(true);\n        setMovieEditErrors(validate(movieEdit));\n      };\n    \n      useEffect(() => {\n        \n        (async () => {if(Object.keys(movieEdit).length === 0 && isSubmit){\n            const { data } = await axios.put(`${moviesUrl}/${movie._id}`, movieEdit);\n            console.log(data);\n            dispatch(doEditMovie(movieEdit));\n          setMovieEdit(movieEdit);\n          navigate('/mainpage')\n        }})()\n      }, [movieEditErrors])\n      \n    \n      const cancel = () => {\n        navigate('/mainpage')\n    }\n    \n      const validate = (values) => {\n        const errors = {}\n        if(!values.name) {\n            errors.name = \"Name is required!\";\n        }\n        if(values.genres[0]==='') {\n            errors.genres = \"Genres is required!\";\n        }\n        if(!values.image) {\n            errors.image = \"Image is required!\";\n        }\n        if(!values.yearPremiered) {\n            errors.yearPremiered = \"YearPremiered is required!\";\n        }\n        return errors;\n      }\n\n  return (\n    <div style={{marginTop: '20px'}}>\n \n<Card sx={{ width: '50%' }}>\n<form onSubmit={handleSubmit}>\n      <CardContent>\n        <Typography sx={{ fontSize: 17 }} color=\"text.secondary\" gutterBottom>\n            Edit Movie: {movie.name} \n        </Typography>   \n        <Grid container direction={\"column\"} spacing={3}>\n        <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Name:\"\n                    value={movieEdit.name}\n                    name=\"name\"\n                    onChange={(e) =>\n                     setMovieEdit({ ...movieEdit, name: e.target.value })\n                    }\n                  />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.name}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Genres:\"\n                    value={movieEdit.genres}\n                    name=\"genres\"\n                    onChange={(e) =>\n                        setMovieEdit({ ...movieEdit, genres: e.target.value.split(',') })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.genres}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Image URL:\"\n                    value={movieEdit.image}\n                    name=\"image\"\n                    onChange={(e) =>\n                    setMovieEdit({ ...movieEdit, image: e.target.value })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.image}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    name=\"image\"\n                    label=\"Premired:\"\n                    type=\"date\"\n                    value={movieEdit.yearPremiered.split('T')[0]}\n                    InputLabelProps={{ shrink: true, required: true }}\n                    onChange={(e) =>\n                    setMovieEdit({ ...movieEdit, yearPremiered : e.target.value+\"T00:00:00.000Z\" })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieEditErrors.yearPremiered}\n                </Grid>\n                <Grid item>\n                  <Button type=\"submit\" variant=\"contained\">\n                    UPDATE\n                  </Button>{\" \"}\n                  <Button variant=\"contained\" onClick={cancel}>Cancel</Button> {' '}\n                </Grid>\n                </Grid>\n      </CardContent>\n      </form>\n    </Card>\n    </div>\n  )\n}\n\nexport default EditMovieComp"]},"metadata":{},"sourceType":"module"}