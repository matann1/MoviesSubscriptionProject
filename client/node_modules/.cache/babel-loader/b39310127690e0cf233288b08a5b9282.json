{"ast":null,"code":"var _jsxFileName = \"/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddMovieComp.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport Card from \"@mui/material/Card\";\nimport Grid from \"@mui/material/Grid\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { doAddMovie } from \"../redux/MoviesActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst moviesUrl = \"http://localhost:8000/movies\";\n\nconst AddMovieComp = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const movies = useSelector(state => state.MoviesReducer.movies);\n  const [movieToAdd, setMovieToAdd] = useState({});\n  const [movieToAddErrors, setMovieToAddErrors] = useState({});\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [movieExist, setMovieExist] = useState(true);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsSubmit(true);\n    setMovieToAddErrors(validate(movieToAdd));\n\n    if (movieExist === false) {\n      alert('This movie already exist!');\n    }\n  };\n\n  useEffect(() => {\n    if (movies.find(sunMem => sunMem.name === movieToAdd.name)) {\n      setMovieExist(false);\n    } else {\n      setMovieExist(true);\n    }\n\n    (async () => {\n      if (Object.keys(movieToAddErrors).length === 0 && isSubmit && movieExist) {\n        try {\n          const {\n            data\n          } = await axios.post(`${moviesUrl}`, movieToAdd);\n          console.log(data);\n          setMovieToAdd(movieToAdd);\n          dispatch(doAddMovie(movieToAdd));\n          setMovieExist(false);\n          navigate('/mainpage');\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    })();\n  }, [movieToAddErrors, movieExist, isSubmit]);\n\n  const cancel = () => {\n    navigate('/mainpage/', {\n      state: {\n        currentAlignment: 'allmovies'\n      }\n    });\n  };\n\n  const validate = values => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = \"Name is required!\";\n    }\n\n    if (!values.genres) {\n      errors.genres = \"Genres is required!\";\n    }\n\n    if (!values.image) {\n      errors.image = \"Image is required!\";\n    }\n\n    if (!values.yearPremiered) {\n      errors.yearPremiered = \"Premiered is required!\";\n    }\n\n    if (!values.youtubeEmbed) {\n      errors.youtubeEmbed = \"Youtube Embed is required!\";\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: \"50%\",\n        boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h7\",\n            component: \"div\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              direction: \"column\",\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"outlined-textarea\",\n                  label: \"Name:\",\n                  multiline: true,\n                  name: \"name\",\n                  onChange: e => setMovieToAdd({ ...movieToAdd,\n                    name: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                style: {\n                  color: 'red'\n                },\n                children: movieToAddErrors.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"outlined-textarea\",\n                  label: \"Genres:\",\n                  multiline: true,\n                  name: \"genres\",\n                  onChange: e => setMovieToAdd({ ...movieToAdd,\n                    genres: e.target.value.split(\",\")\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                style: {\n                  color: 'red'\n                },\n                children: movieToAddErrors.genres\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"outlined-textarea\",\n                  label: \"Image URL:\",\n                  multiline: true,\n                  name: \"image\",\n                  onChange: e => setMovieToAdd({ ...movieToAdd,\n                    image: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                style: {\n                  color: 'red'\n                },\n                children: movieToAddErrors.image\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  id: \"outlined-textarea\",\n                  type: \"date\",\n                  name: \"yearPremiered\",\n                  onChange: e => setMovieToAdd({ ...movieToAdd,\n                    yearPremiered: e.target.value + \"T00:00:00.000Z\"\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                style: {\n                  color: 'red'\n                },\n                children: movieToAddErrors.yearPremiered\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  name: \"youtubeEmbed\",\n                  label: \"Youtube Embed:\",\n                  onChange: e => setMovieToAdd({ ...movieToAdd,\n                    youtubeEmbed: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                style: {\n                  color: 'red'\n                },\n                children: movieToAddErrors.youtubeEmbed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  children: \"ADD\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: cancel,\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 19\n                }, this), \" \", ' ']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddMovieComp, \"7Rhr/DwkvnPfh6xqaoNqqYfXzTw=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n\n_c = AddMovieComp;\nexport default AddMovieComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMovieComp\");","map":{"version":3,"sources":["/Users/matanneyman/Desktop/full stack/finalProject/client/client/src/components/AddMovieComp.js"],"names":["axios","Card","Grid","CardContent","Button","Typography","TextField","useState","useEffect","useNavigate","useDispatch","useSelector","doAddMovie","moviesUrl","AddMovieComp","dispatch","navigate","movies","state","MoviesReducer","movieToAdd","setMovieToAdd","movieToAddErrors","setMovieToAddErrors","isSubmit","setIsSubmit","movieExist","setMovieExist","handleSubmit","e","preventDefault","validate","alert","find","sunMem","name","Object","keys","length","data","post","console","log","err","cancel","currentAlignment","values","errors","genres","image","yearPremiered","youtubeEmbed","marginTop","width","boxShadow","target","value","color","split"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Card from \"@mui/material/Card\";\nimport Grid from \"@mui/material/Grid\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport TextField from \"@mui/material/TextField\";\n\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { doAddMovie } from \"../redux/MoviesActions\";\n\nconst moviesUrl = \"http://localhost:8000/movies\";\n\nconst AddMovieComp = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const movies = useSelector(state => state.MoviesReducer.movies);\n  const [movieToAdd, setMovieToAdd] = useState({});\n  const [movieToAddErrors, setMovieToAddErrors] = useState({})\n  const [isSubmit, setIsSubmit] = useState(false)\n  const [movieExist, setMovieExist] = useState(true)\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmit(true);\n    setMovieToAddErrors(validate(movieToAdd));\n    if(movieExist === false){\n        alert('This movie already exist!');\n    }\n  };\n\n  useEffect(() => {\n    if(movies.find((sunMem)=> sunMem.name === movieToAdd.name)){\n        setMovieExist(false)\n    }else{\n        setMovieExist(true)\n     }\n    (async () => {if(Object.keys(movieToAddErrors).length === 0 && isSubmit && movieExist){\n        try{\n      const { data } = await axios.post(`${moviesUrl}`, movieToAdd);\n      console.log(data)\n      setMovieToAdd(movieToAdd);\n      dispatch(doAddMovie(movieToAdd));\n      setMovieExist(false)\n      navigate('/mainpage')\n    }\n    catch(err){\n        console.log(err)\n    }\n    }\n}\n    )()\n  }, [movieToAddErrors, movieExist, isSubmit])\n  \n  const cancel = () => {\n    navigate('/mainpage/' ,{state:{currentAlignment: 'allmovies'}})\n}\n  const validate = (values) => {\n    const errors = {}\n    if(!values.name) {\n        errors.name = \"Name is required!\";\n    }\n    if(!values.genres) {\n        errors.genres = \"Genres is required!\";\n    }\n    if(!values.image) {\n        errors.image = \"Image is required!\";\n    }\n    if(!values.yearPremiered) {\n        errors.yearPremiered = \"Premiered is required!\";\n    }\n    if(!values.youtubeEmbed) {\n        errors.youtubeEmbed = \"Youtube Embed is required!\";\n    }\n    return errors;\n  }\n\n  return (\n    <div style={{ marginTop: '20px' }}>\n      <Card sx={{ width: \"50%\",  boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\" }}>\n        <form onSubmit={handleSubmit}>\n          <CardContent>\n            <Typography variant=\"h7\" component=\"div\">\n              <Grid container direction={\"column\"} spacing={2}>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Name:\"\n                    multiline\n                    name=\"name\"\n                    onChange={(e) =>\n                      setMovieToAdd({ ...movieToAdd, name: e.target.value })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieToAddErrors.name}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Genres:\"\n                    multiline\n                    name=\"genres\"\n                    onChange={(e) =>\n                      setMovieToAdd({\n                        ...movieToAdd,\n                        genres: e.target.value.split(\",\"),\n                      })\n                    }\n                  />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieToAddErrors.genres}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    id=\"outlined-textarea\"\n                    label=\"Image URL:\"\n                    multiline\n                    name=\"image\"\n                    onChange={(e) =>\n                      setMovieToAdd({ ...movieToAdd, image: e.target.value })\n                    }\n                  />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieToAddErrors.image}\n                </Grid>\n                <Grid item >\n                  <TextField\n                    id=\"outlined-textarea\"\n                    type='date'\n                    name=\"yearPremiered\"\n                    onChange={(e) =>\n                      setMovieToAdd({\n                        ...movieToAdd,\n                        yearPremiered: e.target.value + \"T00:00:00.000Z\",\n                      })\n                    }\n                  />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieToAddErrors.yearPremiered}\n                </Grid>\n                <Grid item>\n                  <TextField\n                    name=\"youtubeEmbed\"\n                    label=\"Youtube Embed:\"\n                    onChange={(e) =>\n                    setMovieToAdd({ ...movieToAdd, youtubeEmbed : e.target.value })\n                    }\n                    />\n                </Grid>\n                <Grid item style={{color: 'red'}}>\n                    {movieToAddErrors.youtubeEmbed}\n                </Grid>\n                <Grid item>\n                  <Button type=\"submit\" variant=\"contained\">\n                    ADD\n                  </Button>{\" \"}\n                  <Button variant=\"contained\" onClick={cancel}>Cancel</Button> {' '}\n                </Grid>\n              </Grid>\n            </Typography>\n          </CardContent>\n        </form>\n      </Card>\n    </div>\n  );\n};\n\nexport default AddMovieComp;\n"]},"metadata":{},"sourceType":"module"}